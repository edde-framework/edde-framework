<?php
	declare(strict_types=1);

	namespace Edde\Common\Template;

	use Edde\Api\Resource\LazyResourceManagerTrait;
	use Edde\Api\Template\IMacro;
	use Edde\Api\Template\TemplateException;
	use Edde\Common\Node\NodeIterator;
	use Edde\Common\Node\NodeUtils;

	class Template extends AbstractTemplate {
		use LazyResourceManagerTrait;

		/**
		 * @inheritdoc
		 */
		public function compile() {
			if (empty($this->resourceList)) {
				throw new TemplateException(sprintf('Resource list is empty;cannot build a template.'));
			}
			ob_start();
			echo "<?php
	declare(strict_types=1);
	
	/**
	 * autogenerated template at [" . date('Y-m-d H:i:s') . "] from
	 *
";
			foreach ($this->resourceList as $name => $resource) {
				printf("\t * - resource [%s]\n\t *\t in [%s]\n", $name, $resource->getUrl());
			}
			echo "\t*/
	class " . $this->getClass() . " {
		public function template() { ?>\n";
			foreach ($this->resourceList as $resource) {
				NodeUtils::namespace($root = $this->resourceManager->resource($resource), '~^(?<namespace>[a-z]):(?<name>[a-zA-Z0-9_-]+)$~');
				$iterator = NodeIterator::recursive($root);
				$iterator->rewind();
				/** @var $macro IMacro */
				$macro = $this->traverse($root, $this);
				$macro->enter($root, $iterator, $this);
				$macro->node($root, $iterator, $this);
				$macro->leave($root, $iterator, $this);
			}
			echo "<?php
		}
	}
";
			$file = $this->getFile();
			$file->write(ob_get_clean());
			$file->close();
			return $file;
		}
	}
