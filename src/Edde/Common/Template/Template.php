<?php
	declare(strict_types=1);

	namespace Edde\Common\Template;

	use Edde\Api\Resource\LazyResourceManagerTrait;
	use Edde\Api\Template\TemplateException;
	use Edde\Common\Node\NodeUtils;

	class Template extends AbstractTemplate {
		use LazyResourceManagerTrait;

		/**
		 * @inheritdoc
		 */
		public function compile() {
			if (empty($this->resourceList)) {
				throw new TemplateException(sprintf('Resource list is empty;cannot build a template.'));
			}
			$file = $this->getFile();
			$file->write("<?php\n");
			$file->write("\tdeclare(strict_types=1);\n\n");
			$file->write("\t/**\n");
			$file->write(sprintf("\t * autogenerated template at [%s]\n\t *\n", date('Y-m-d H:i:s')));
			foreach ($this->resourceList as $name => $resource) {
				$file->write(sprintf("\t * - resource [%s]\n\t *\t in [%s]\n", $name, $resource->getUrl()));
			}
			$file->write("\t */\n");
			$file->write(sprintf("\tclass %s {\n", $this->getClass()));
			$file->write("?>\n");
			foreach ($this->resourceList as $resource) {
				NodeUtils::namespace($root = $this->resourceManager->resource($resource), '~^(?<namespace>[a-z]):(?<name>[a-zA-Z0-9_-]+)$~');
				$this->execute($root);
			}
			$file->write("<?php\n");
			$file->write("\t}\n");
			$file->close();
		}
	}
